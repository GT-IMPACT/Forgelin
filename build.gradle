buildscript {
	repositories {
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			name = "jitpack"
			url = "https://jitpack.io"
		}
	}
	dependencies {
		classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
	}
}

plugins {
	id "com.github.johnrengelman.shadow" version "6.1.0"
	id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

apply plugin: "signing"
apply plugin: "forge"

version = mod_version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = "UTF-8"

minecraft {
	version = mc_version + "-" + forge_version + "-" + mc_version
	runDir = "run"
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from (sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		expand "version": project.version, "mcversion": mc_version
	}
	from (sourceSets.main.resources.srcDirs) {
		exclude "mcmod.info"
	}
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib",
			"org.jetbrains.kotlin:kotlin-stdlib-jdk7",
			"org.jetbrains.kotlin:kotlin-stdlib-jdk8",
			"org.jetbrains.kotlin:kotlin-reflect",
			"org.jetbrains:annotations",
			"org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version",
			"org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
}

jar {
	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
					"FMLCorePluginContainsFMLMod": "true"
	}
}

shadowJar {
	classifier = ""

	dependencies {
		exclude "net\\minecraftforge\\**"
		exclude "GradleStart*"
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
		include(dependency("org.jetbrains.kotlin:kotlin-reflect"))
		include(dependency("org.jetbrains:annotations"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"))
	}

	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
					"FMLCorePluginContainsFMLMod": "true"
	}
}

tasks.build.dependsOn shadowJar

tasks.withType(JavaCompile) {
	options.compilerArgs.addAll(["-Xlint:unchecked", "-Xlint:deprecation"])
}

artifacts {
	archives shadowJar
}

reobf {
	shadowJar {
	}
}

task reobfShadowJar(dependsOn: "reobf") {
}

tasks.reobfShadowJar.mustRunAfter shadowJar
tasks.build.dependsOn reobfShadowJar

task signJar(dependsOn: "reobf") {
	doLast {
		ant.signjar(
				destDir: jar.destinationDirectory,
				jar: jar.archiveFile,
				alias: findProperty("keyStoreAlias") ?: "",
				keystore: findProperty("keyStore") ?: "",
				storepass: findProperty("keyStorePass") ?: "",
				digestalg: findProperty("signDigestAlg") ?: "",
				tsaurl: findProperty("signTSAurl") ?: "",
				verbose: true
		)
	}
}

