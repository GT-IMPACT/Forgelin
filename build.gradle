buildscript {
	repositories {
		jcenter()
		maven {
			name "forge"
			url "http://files.minecraftforge.net/maven/"
		}
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
	}
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'forge'
apply plugin: 'kotlin'
apply plugin: 'signing'

version = mod_version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

minecraft {
	version = mc_version + "-" + forge_version + "-" + mc_version
	runDir = "run"

	replaceIn "Forgelin.kt"
	replace "@VERSION@", mod_version
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from (sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		expand "version": project.version, "mcversion": mc_version
	}
	from (sourceSets.main.resources.srcDirs) {
		exclude "mcmod.info"
	}
}

repositories {
	jcenter()
}

dependencies {
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
	compile group: "org.jetbrains", name: "annotations", version: annotations_version
	compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
}

jar {
	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
					"FMLCorePluginContainsFMLMod": "true"
	}
}

shadowJar {
	classifier = ""
	dependencies {
		exclude 'net\\minecraftforge\\**'
		exclude 'GradleStart*'
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"))
		include(dependency("org.jetbrains:annotations:${annotations_version}"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}"))
	}
	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
					"FMLCorePluginContainsFMLMod": "true"
	}
}

tasks.build.dependsOn shadowJar

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

artifacts {
	archives shadowJar
}

reobf {
	shadowJar {
	}
}

task reobfShadowJar(dependsOn: 'reobf'){
}

tasks.reobfShadowJar.mustRunAfter shadowJar
tasks.build.dependsOn reobfShadowJar

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}

